package com.basic;

/**
 * @Description: 抽象类和接口
 * @Author: QHB
 * @Date: 2022/10/11 20:30
 */

public class API {
    public static void main(String[] args) {
        System.out.println("GG");
    }
}


/*
抽象方法和抽象类:
    抽象方法: 1. 使用abstract修饰的方法, 没有方法体, 只有声明
            2. 定义的是一种 规范, 就是告诉子类必须要给抽象方法提供具体的实现

    抽象类: 1. 包含抽象方法的类就是抽象类
            2. 通过抽象类, 可以做到严格限制子类的设计, 使子类之间更加通用

        抽象类的要点:
            有抽象方法的类只能定义成抽象类
            抽象类不能实例化, 即不能用new来实例化抽象类
            抽象类可以包含属性 方法 构造方法, 但是构造方法不能用来new实例, 只能用来被子类调用
            抽象类只能用来被继承
            抽象方法必须被子类实现



接口interface:
    接口就是一组规范, 所有实现类都要遵守

    接口是比抽象类还抽象的抽象类, 可以更加规范地对子类进行约束, 全面专业地实现了 规范和具体实现的分离
    接口和实现类不是父子关系, 是实现规则的关系.

    如何定义和使用接口

    [访问修饰符] interface 接口名 [extends 父接口1, 父接口2...] {
        常量定义;
        方法定义;
    }

    访问修饰符 --  只能是public或默认
    接口名 --  和类名采用相同的命名机制
    extends  --  接口可以多继承
    常量 --  接口中的属性只能是常量, 总是 public static final修饰
    方法 -- 接口中的方法只能是 public abstract

    要点:
    1. 子类通过 implements 来实现接口中的规范
    2. 接口不能创建实例, 但是可以用于声明引用变量类型
    3. 一个类实现了接口, 必须实现接口中所有的方法, 并且这些方法只能是public的
    4. JDK1.8后, 接口中包含普通的静态方法和默认方法


接口新特性:
    JAVA8之后, 允许在接口中定义默认方法和静态方法


接口的多继承
    接口支持多继承, 子接口extends父接口就会获得父接口中的一切



 */